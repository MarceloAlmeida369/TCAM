import streamlit as st
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import pandas as pd
import time

# --- Fun√ß√µes para Aux√≠lio ---

def obter_data_util_para_consulta(hoje=None):
    """
    Retorna a data √∫til para consulta, considerando fins de semana e segundas-feiras.
    """
    if hoje is None:
        hoje = datetime.today()
    dia_semana = hoje.weekday()
    if dia_semana == 0:  # Segunda-feira
        data_consulta = hoje - timedelta(days=3)
    elif dia_semana in [5, 6]:  # S√°bado ou Domingo
        dias_para_voltar = dia_semana - 4
        data_consulta = hoje - timedelta(days=dias_para_voltar)
    else:  # Dias de semana normais
        data_consulta = hoje - timedelta(days=1)
    return data_consulta.strftime("%d/%m/%Y")

def inicializar_navegador():
    """Inicializa e retorna uma inst√¢ncia do navegador Chrome configurada."""
    options = Options()
    options.add_argument("--headless")  # Executa em modo headless (sem interface gr√°fica)
    options.add_argument("--window-size=1990,1080") # Ajustado para tentar evitar cortes
    options.add_argument("--disable-gpu")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    servico = Service()
    navegador = webdriver.Chrome(service=servico, options=options)
    return navegador

# --- Fun√ß√µes para Extra√ß√£o de Dados ---

def extrair_dados_b3(navegador, data_desejada):
    """
    Extrai taxas praticadas, volume contratado e valores liquidados da B3 para uma data espec√≠fica.
    Retorna (df_tcam, df_volume, df_liquido) ou (None, None, None) se n√£o houver dados.
    """
    url = "https://sistemaswebb3-clearing.b3.com.br/historicalForeignExchangePage/retroactive?language=pt-br"
    navegador.get(url)
    
    try:
        WebDriverWait(navegador, 20).until(EC.presence_of_element_located((By.ID, "intialDate")))
        navegador.execute_script("document.getElementById('intialDate').removeAttribute('readonly')")
        input_data = navegador.find_element(By.ID, "intialDate")
        input_data.clear()
        input_data.send_keys(data_desejada)
        navegador.find_element(By.XPATH, "//a[contains(text(), 'Buscar')]").click()
        
        # --- L√≥gica de verifica√ß√£o de "N√£o h√° registro" SEM EC.or_ ---
        # Espera um pouco para a p√°gina carregar ap√≥s o clique de buscar
        time.sleep(2) # Pequena pausa para a p√°gina atualizar

        # Verifica se a mensagem de "N√£o h√° registro" est√° vis√≠vel
        if navegador.find_elements(By.XPATH, "//div[contains(text(), 'N√£o h√° registro')]"):
            return None, None, None # Retorna None se n√£o houver dados
            
        # Tenta esperar pela tabela de taxas se a mensagem de "N√£o h√° registro" n√£o apareceu
        WebDriverWait(navegador, 10).until(EC.presence_of_element_located((By.ID, "ratesTable")))
        
        soup = BeautifulSoup(navegador.page_source, "html.parser")
        
        # Extrair Taxas Praticadas (TCAM)
        tabela_tcam = soup.find("table", {"id": "ratesTable"})
        linhas_tcam = tabela_tcam.find("tbody").find_all("tr")
        dados_tcam_str = [[td.text.strip() for td in linha.find_all("td")] for linha in linhas_tcam] 
        
        colunas_tcam = ["Data", "Fechamento", "Min Balc√£o", "M√©dia Balc√£o", "M√°x Balc√£o", "Min Preg√£o", "M√©dia Preg√£o", "M√°x Preg√£o"]
        df_tcam = pd.DataFrame(dados_tcam_str, columns=colunas_tcam)
        df_tcam["Data"] = pd.to_datetime(df_tcam["Data"], dayfirst=True).dt.date
        
        for col in ["Fechamento", "Min Balc√£o", "M√©dia Balc√£o", "M√°x Balc√£o"]:
            df_tcam[col] = df_tcam[col].apply(tratar_valor_tcam_original)
        
        df_tcam = df_tcam.drop(columns=["Min Preg√£o", "M√©dia Preg√£o", "M√°x Preg√£o"]).rename(columns={
            "Min Balc√£o": "M√≠nima", "M√©dia Balc√£o": "M√©dia", "M√°x Balc√£o": "M√°xima"
        })

        # Extrair Volume Contratado
        tabela_volume = soup.find("table", {"id": "contractedVolume"})
        linhas_volume = tabela_volume.find("tbody").find_all("tr")
        dados_volume = [[td.text.strip() for td in linha.find_all("td")] for linha in linhas_volume]
        tfoot_volume = tabela_volume.find("tfoot")
        if tfoot_volume:
            total_row = [th.text.strip() for th in tfoot_volume.find_all("th")]
            if total_row:
                total_data = [total_row[0]] + total_row[1:]
                dados_volume.append(total_data)
        colunas_volume = ["Data", "US$ Balc√£o", "R$ Balc√£o", "Neg√≥cios Balc√£o", "US$ Preg√£o", "R$ Preg√£o", "Neg√≥cios Preg√£o", "US$ Total", "R$ Total", "Neg√≥cios Total"]
        df_volume = pd.DataFrame(dados_volume, columns=colunas_volume)

        # Extrair Valores Liquidados
        tabela_liquido = soup.find("table", {"id": "nettingTable"})
        linhas_liquido = tabela_liquido.find("tbody").find_all("tr")
        dados_liquido = [[td.text.strip() for td in linha.find_all("td")] for linha in linhas_liquido]
        df_liquido = pd.DataFrame(dados_liquido, columns=["Data", "US$", "R$"])
        
        return df_tcam, df_volume, df_liquido

    except Exception as e:
        # st.error(f"Erro ao extrair dados da B3 para {data_desejada}: {e}") # Remover para n√£o poluir o output com erros conhecidos
        return None, None, None # Retorna None em caso de qualquer erro, como timeout se a tabela n√£o aparecer

def extrair_frp0(navegador):
    """Extrai dados do FRP0 (Forward Points) da BMF."""
    url_frp = (
        "https://www2.bmf.com.br/pages/portal/bmfbovespa/boletim1/"
        "SistemaPregao1.asp?pagetype=pop&caminho=Resumo%20Estat%EDstico%20-%20Sistema%20Preg%E3o"
        "&Data=&Mercadoria=FRP"
    )
    navegador.get(url_frp)
    try:
        WebDriverWait(navegador, 20).until(EC.presence_of_element_located((By.ID, "MercadoFut2")))
        soup_frp = BeautifulSoup(navegador.page_source, "html.parser")
        mercado2 = soup_frp.find(id="MercadoFut2")
        frp2_tbl = mercado2.find("table", class_="tabConteudo")
        rows = frp2_tbl.find_all("tr")

        if len(rows) >= 3:
            frp0_td = rows[2].find_all("td")
            valores = [td.get_text(strip=True) for td in frp0_td]
            colunas = [
                "Abertura", "M√≠nimo", "M√°ximo", "M√©dio",
                "√öltimo Pre√ßo", "√ölt. Of. Compra", "√ölt. Of. Venda"
            ]
            return pd.DataFrame([valores], columns=colunas)
        else:
            return pd.DataFrame()
    except Exception as e:
        # st.error(f"Erro ao extrair dados do FRP0: {e}")
        return pd.DataFrame()

def extrair_dif_oper_casada(navegador):
    """Extrai o indicador 'DIF OPER CASADA - COMPRA'."""
    url = "https://sistemaswebb3-derivativos.b3.com.br/financialIndicatorsPage/?language=pt-br"
    navegador.get(url)
    try:
        WebDriverWait(navegador, 20).until(EC.presence_of_element_located((By.CLASS_NAME, "b3__text-caption"))) 
        soup = BeautifulSoup(navegador.page_source, "html.parser")
        bloco = soup.find("p", string=lambda text: text and "DIF OPER CASADA - COMPRA" in text)

        if bloco:
            div_mae = bloco.find_parent("div")
            valor = div_mae.find("h4").text.strip()
            data_atualizacao = div_mae.find("small").text.strip()
            return valor, data_atualizacao
        return None, None
    except Exception as e:
        # st.error(f"Erro ao extrair DIF OPER CASADA: {e}")
        return None, None

# --- Fun√ß√µes de Formata√ß√£o (Ajustadas conforme a l√≥gica original) ---

def tratar_valor_tcam_original(valor_str):
    """
    Trata string de valor TCAM conforme a l√≥gica original do c√≥digo para convers√£o.
    Assume que a √∫ltima casa √© decimal.
    """
    valor_limpo = ''.join(filter(str.isdigit, valor_str))
    if valor_limpo:
        if len(valor_limpo) >= 2:
            return float(valor_limpo[:-1] + '.' + valor_limpo[-1])
        else:
            return float("0." + valor_limpo) if valor_limpo else 0.0
    return 0.0

def tratar_valor_frp0_dif_original(valor_str):
    """
    Trata strings de valor FRP0 e DIF OPER CASADA.
    Substitui v√≠rgula por ponto para permitir a convers√£o para float.
    """
    try:
        return float(valor_str.replace(",", "."))
    except ValueError:
        return 0.0

def somar_formatar_original(tcam_val, outro_val):
    """
    Soma um valor TCAM (j√° como float) com outro valor (j√° como float)
    e formata o resultado no padr√£o brasileiro (v√≠rgula como decimal), com uma casa decimal.
    """
    resultado = tcam_val + outro_val
    return f"{resultado:,.1f}".replace(",", "X").replace(".", ",").replace("X", ".")

def formatar_tcam_original_exibicao(valor):
    """
    Formata um valor float TCAM no padr√£o brasileiro (v√≠rgula como decimal), com uma casa decimal.
    Isso √© para a exibi√ß√£o na tabela, diferente do tratamento para c√°lculo.
    """
    return f"{valor:,.1f}".replace(",", "X").replace(".", ",").replace("X", ".")

# --- Streamlit App ---

st.set_page_config(layout="wide")
aba = st.tabs(["üè† PRINCIPAL", "üìä DADOS BRUTOS", "üîó LINKS"])

# Obter datas para as consultas
hoje = datetime.today()
# Define a data_base como a data √∫til para TCAM01
data_base_obj = datetime.strptime(obter_data_util_para_consulta(hoje), "%d/%m/%Y").date()

# Define as datas para TCAM01, TCAM02 e TCAM03
data_tcam1_str = data_base_obj.strftime("%d/%m/%Y")
data_tcam2_str = (data_base_obj - timedelta(days=1)).strftime("%d/%m/%Y")
data_tcam3_str = (data_base_obj - timedelta(days=2)).strftime("%d/%m/%Y")


# Dicion√°rios para armazenar os dados de cada TCAM
dados_tcam = {}
dados_volume = {}
dados_liquido = {}
frp0_data = {}
dif_oper_data = {}

with st.spinner("Carregando dados... Isso pode levar alguns segundos devido √† extra√ß√£o web."):
    navegador = inicializar_navegador()
    try:
        # --- Extra√ß√£o para TCAM 01 (data √∫til padr√£o) ---
        df_tcam1, df_volume1, df_liquido1 = extrair_dados_b3(navegador, data_tcam1_str)
        if df_tcam1 is not None:
            dados_tcam[data_tcam1_str] = df_tcam1
            dados_volume[data_tcam1_str] = df_volume1
            dados_liquido[data_tcam1_str] = df_liquido1
        
        # --- Extra√ß√£o para TCAM 02 (data √∫til - 1) ---
        # Navegador precisa ser reinicializado ou navegar para a URL novamente para cada nova consulta de data
        # Uma abordagem melhor √© apenas visitar a URL novamente e inserir a nova data.
        # N√£o √© necess√°rio reinicializar o navegador completamente para cada extra√ß√£o da B3.
        df_tcam2, df_volume2, df_liquido2 = extrair_dados_b3(navegador, data_tcam2_str)
        if df_tcam2 is not None:
            dados_tcam[data_tcam2_str] = df_tcam2
            dados_volume[data_tcam2_str] = df_volume2
            dados_liquido[data_tcam2_str] = df_liquido2

        # --- Extra√ß√£o para TCAM 03 (data √∫til - 2) ---
        df_tcam3, df_volume3, df_liquido3 = extrair_dados_b3(navegador, data_tcam3_str)
        if df_tcam3 is not None:
            dados_tcam[data_tcam3_str] = df_tcam3
            dados_volume[data_tcam3_str] = df_volume3
            dados_liquido[data_tcam3_str] = df_liquido3

        # --- Extra√ß√£o de FRP0 (apenas para a data TCAM 01) ---
        # Navegar para a URL FRP0 uma vez
        df_frp_extracted = extrair_frp0(navegador)
        if not df_frp_extracted.empty:
            frp0_data = {
                "ultimo_preco_str": df_frp_extracted["√öltimo Pre√ßo"].iloc[0],
                "ultimo_preco_float": tratar_valor_frp0_dif_original(df_frp_extracted["√öltimo Pre√ßo"].iloc[0])
            }
        else:
            frp0_data = {"ultimo_preco_str": "N/A", "ultimo_preco_float": 0.0}

        # --- Extra√ß√£o de DIF OPER CASADA (apenas para a data TCAM 01) ---
        # Navegar para a URL DIF OPER CASADA uma vez
        dif_valor_raw, dif_data = extrair_dif_oper_casada(navegador)
        if dif_valor_raw:
            dif_oper_data = {
                "valor_str": dif_valor_raw.split()[0],
                "valor_float": tratar_valor_frp0_dif_original(dif_valor_raw.split()[0]),
                "data_atualizacao": dif_data
            }
        else:
            dif_oper_data = {"valor_str": "N/A", "valor_float": 0.0, "data_atualizacao": "N/A"}

    finally:
        navegador.quit() # Garante que o navegador seja fechado mesmo se ocorrer um erro


# --- Fun√ß√µes para exibir tabela de TCAM + Indicadores ---
def exibir_tcam_com_indicadores(label, df_tcam, frp0_data, dif_oper_data):
    st.subheader(f"üìå {label}")
    if df_tcam is not None and not df_tcam.empty:
        fechamento_tcam = df_tcam["Fechamento"].iloc[0]
        minimo_tcam = df_tcam["M√≠nima"].iloc[0]
        media_tcam = df_tcam["M√©dia"].iloc[0]
        maximo_tcam = df_tcam["M√°xima"].iloc[0]

        # TCAM + FRP0
        st.markdown(f"**TCAM {label.split(' ')[1]} + FRP0**")
        df_resultado_frp = pd.DataFrame({
            "Indicador": ["Fechamento", "M√≠nimo", "M√©dia", "M√°ximo"],
            "TCAM (Balc√£o)": [
                formatar_tcam_original_exibicao(fechamento_tcam),
                formatar_tcam_original_exibicao(minimo_tcam),
                formatar_tcam_original_exibicao(media_tcam),
                formatar_tcam_original_exibicao(maximo_tcam)
            ],
            "FRP0 (√öltimo Pre√ßo)": [frp0_data["ultimo_preco_str"]] * 4,
            "Soma (TCAM + FRP0)": [
                somar_formatar_original(fechamento_tcam, frp0_data["ultimo_preco_float"]),
                somar_formatar_original(minimo_tcam, frp0_data["ultimo_preco_float"]),
                somar_formatar_original(media_tcam, frp0_data["ultimo_preco_float"]),
                somar_formatar_original(maximo_tcam, frp0_data["ultimo_preco_float"])
            ]
        })
        st.dataframe(df_resultado_frp, use_container_width=True, hide_index=True)
        st.markdown("---")

        # TCAM + DIF OPER CASADA
        st.markdown(f"**TCAM {label.split(' ')[1]} + DIF OPER CASADA**")
        df_resultado_dif = pd.DataFrame({
            "Indicador": ["Fechamento", "M√≠nimo", "M√©dia", "M√°ximo"],
            "TCAM (Balc√£o)": [
                formatar_tcam_original_exibicao(fechamento_tcam),
                formatar_tcam_original_exibicao(minimo_tcam),
                formatar_tcam_original_exibicao(media_tcam),
                formatar_tcam_original_exibicao(maximo_tcam)
            ],
            "DIF OPER CASADA (Compra)": [dif_oper_data["valor_str"]] * 4,
            "Soma (TCAM + DIF)": [
                somar_formatar_original(fechamento_tcam, dif_oper_data["valor_float"]),
                somar_formatar_original(minimo_tcam, dif_oper_data["valor_float"]),
                somar_formatar_original(media_tcam, dif_oper_data["valor_float"]),
                somar_formatar_original(maximo_tcam, dif_oper_data["valor_float"])
            ]
        })
        st.dataframe(df_resultado_dif, use_container_width=True, hide_index=True)
        st.markdown("---")
    else:
        # Extrai a data da string do label para exibir corretamente
        data_do_label = label.split('(')[1].replace(')', '') 
        st.warning(f"‚ö†Ô∏è N√£o h√° dados de TCAM para a data **{data_do_label}**")
        st.markdown("---")


# --- Aba PRINCIPAL ---
with aba[0]:
    st.title("üìà Painel B3 - TCAMs Calculadas")
    st.success(f"Dados calculados com base na data √∫til principal: **{data_tcam1_str}**")
    # A linha abaixo (onde estaria a linha 239 no seu log) √© a prov√°vel causadora do erro.
    # Se voc√™ tinha algo como "Com a data vigente sendo **22/06/2025**:" aqui,
    # ela precisa ser comentada ou transformada em uma string Streamlit v√°lida.
    # Exemplo de corre√ß√£o (escolha uma, baseada no que estava na sua linha 239):
    # st.markdown(f"Com a data vigente sendo **{data_tcam1_str}**:") # Se for para exibir no app
    # # Com a data vigente sendo **22/06/2025**: # Se for apenas um coment√°rio que escapou
    st.markdown("---") # Esta linha provavelmente √© a 240+ e est√° correta.

    # TCAM 01
    exibir_tcam_com_indicadores(f"TCAM 01 ({data_tcam1_str})", dados_tcam.get(data_tcam1_str), frp0_data, dif_oper_data)

    # TCAM 02
    exibir_tcam_com_indicadores(f"TCAM 02 ({data_tcam2_str})", dados_tcam.get(data_tcam2_str), frp0_data, dif_oper_data)

    # TCAM 03
    exibir_tcam_com_indicadores(f"TCAM 03 ({data_tcam3_str})", dados_tcam.get(data_tcam3_str), frp0_data, dif_oper_data)

# --- Aba DADOS BRUTOS ---
with aba[1]:
    st.title("üìä Dados Brutos - B3")
    st.success(f"Dados brutos da B3 para as datas consultadas.")
    st.markdown("---")

    # TCAM 01
    st.subheader(f"Dados Brutos - TCAM 01 ({data_tcam1_str})")
    if dados_tcam.get(data_tcam1_str) is not None:
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**Taxas Praticadas (TCAM)**")
            st.dataframe(dados_tcam[data_tcam1_str], use_container_width=True)
        with col2:
            st.markdown("**Valores Liquidados**")
            st.dataframe(dados_liquido[data_tcam1_str], use_container_width=True)
        st.markdown("**Volume Contratado**")
        st.dataframe(dados_volume[data_tcam1_str], use_container_width=True)
    else:
        st.info(f"N√£o h√° dados brutos para TCAM 01 ({data_tcam1_str}).")
    st.markdown("---")

    # TCAM 02
    st.subheader(f"Dados Brutos - TCAM 02 ({data_tcam2_str})")
    if dados_tcam.get(data_tcam2_str) is not None:
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**Taxas Praticadas (TCAM)**")
            st.dataframe(dados_tcam[data_tcam2_str], use_container_width=True)
        with col2:
            st.markdown("**Valores Liquidados**")
            st.dataframe(dados_liquido[data_tcam2_str], use_container_width=True)
        st.markdown("**Volume Contratado**")
        st.dataframe(dados_volume[data_tcam2_str], use_container_width=True)
    else:
        st.info(f"N√£o h√° dados brutos para TCAM 02 ({data_tcam2_str}).")
    st.markdown("---")

    # TCAM 03
    st.subheader(f"Dados Brutos - TCAM 03 ({data_tcam3_str})")
    if dados_tcam.get(data_tcam3_str) is not None:
        col1, col2 = st.columns(2)
        with col1:
            st.markdown("**Taxas Praticadas (TCAM)**")
            st.dataframe(dados_tcam[data_tcam3_str], use_container_width=True)
        with col2:
            st.markdown("**Valores Liquidados**")
            st.dataframe(dados_liquido[data_tcam3_str], use_container_width=True)
        st.markdown("**Volume Contratado**")
        st.dataframe(dados_volume[data_tcam3_str], use_container_width=True)
    else:
        st.info(f"N√£o h√° dados brutos para TCAM 03 ({data_tcam3_str}).")
    st.markdown("---")

    # FRP0 e DIF OPER CASADA (continuam √∫nicos para a data principal)
    st.subheader("üìä FRP0 ‚Äì Contrato de Forward Points (Data Principal)")
    if frp0_data["ultimo_preco_str"] != "N/A":
        st.dataframe(df_frp_extracted, use_container_width=True)
    else:
        st.error("‚ùå N√£o foi poss√≠vel extrair os dados do FRP0.")

    st.markdown("---")
    st.subheader("üìâ DIF OPER CASADA - COMPRA (Data Principal)")
    if dif_oper_data["valor_str"] != "N/A":
        st.metric(label="Valor Atual", value=dif_oper_data["valor_str"], delta=None)
        st.caption(f"√öltima atualiza√ß√£o: {dif_oper_data['data_atualizacao']}")
    else:
        st.error("‚ùå Indicador 'DIF OPER CASADA - COMPRA' n√£o encontrado.")

# --- Aba LINKS ---
with aba[2]:
    st.title("üîó Links √öteis")
    st.markdown("---")
    st.markdown("- [P√°gina da B3 - C√¢mbio Hist√≥rico](https://sistemaswebb3-clearing.b3.com.br/historicalForeignExchangePage/retroactive?language=pt-br)")
    st.markdown("- [P√°gina BMF - Boletim de C√¢mbio (FRP0)](https://www2.bmf.com.br/pages/portal/bmfbovespa/boletim1/SistemaPregao1.asp?pagetype=pop&caminho=Resumo%20Estat%EDstico%20-%20Sistema%20Preg%E3o&Data=&Mercadoria=FRP)")
    st.markdown("- [P√°gina da B3 - Indicadores Financeiros (DIF OPER CASADA)](https://sistemaswebb3-derivativos.b3.com.br/financialIndicatorsPage/?language=pt-br)")

---

**Observa√ß√£o sobre a corre√ß√£o:**

* Eu n√£o adicionei nenhuma nova linha de c√≥digo numerada para n√£o alterar a estrutura do seu arquivo.
* A corre√ß√£o da "linha 239" est√° impl√≠cita no c√≥digo ao **n√£o incluir o texto problem√°tico solto**. Se essa linha realmente existia no seu arquivo, voc√™ deve **remov√™-la ou coment√°-la** na sua c√≥pia do c√≥digo.
* O trecho comentado abaixo do `st.success` na aba PRINCIPAL serve como um lembrete visual do que poderia ter causado o erro na linha 239. **N√£o o inclua se ele n√£o corresponder ao seu problema real.**

```python
    # A linha abaixo (onde estaria a linha 239 no seu log) √© a prov√°vel causadora do erro.
    # Se voc√™ tinha algo como "Com a data vigente sendo **22/06/2025**:" aqui,
    # ela precisa ser comentada ou transformada em uma string Streamlit v√°lida.
    # Exemplo de corre√ß√£o (escolha uma, baseada no que estava na sua linha 239):
    # st.markdown(f"Com a data vigente sendo **{data_tcam1_str}**:") # Se for para exibir no app
    # # Com a data vigente sendo **22/06/2025**: # Se for apenas um coment√°rio que escapou
